{"data":{"repository":{"nameWithOwner":"0GiS0/ghas-alerts-from-api","url":"https://github.com/0GiS0/ghas-alerts-from-api","vulnerabilityAlerts":{"nodes":[{"id":"RVA_kwDON1juqc8AAAABWdOADA","number":1,"createdAt":"2025-02-06T21:25:41Z","state":"OPEN","vulnerableManifestPath":"requirements.txt","vulnerableRequirements":"= 3.13.0","securityVulnerability":{"package":{"name":"snowflake-connector-python"},"advisory":{"severity":"MODERATE","summary":"snowflake-connector-python vulnerable to insecure cache files permissions","description":"### Issue\nSnowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. On Linux systems, when temporary credential caching is enabled, the Snowflake Connector for Python will cache temporary credentials locally in a world-readable file.\n\nThis vulnerability affects versions 2.3.7 through 3.13.0. Snowflake fixed the issue in version 3.13.1.\n\n### Vulnerability Details\nOn Linux, when either EXTERNALBROWSER or USERNAME_PASSWORD_MFA authentication methods are used with temporary credential caching enabled, the Snowflake Connector for Python will cache the temporary credentials in a local file. In the vulnerable versions of the Driver, this file is created with world-readable permissions.\n\n### Solution\nSnowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.\n\n### Additional Information\nIf you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our [Vulnerability Disclosure Policy](https://hackerone.com/snowflake?type=team).","references":[{"url":"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-r2x6-cjg7-8r43"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2025-24795"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af"},{"url":"https://github.com/advisories/GHSA-r2x6-cjg7-8r43"}],"identifiers":[{"type":"GHSA","value":"GHSA-r2x6-cjg7-8r43"},{"type":"CVE","value":"CVE-2025-24795"}],"cvss":{"score":4.4,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N"},"cwes":{"nodes":[{"cweId":"CWE-276","name":"Incorrect Default Permissions","description":"During installation, installed file permissions are set to allow anyone to modify those files."}]}}}},{"id":"RVA_kwDON1juqc8AAAABWdOADQ","number":2,"createdAt":"2025-02-06T21:25:41Z","state":"OPEN","vulnerableManifestPath":"requirements.txt","vulnerableRequirements":"= 3.13.0","securityVulnerability":{"package":{"name":"snowflake-connector-python"},"advisory":{"severity":"MODERATE","summary":"snowflake-connector-python vulnerable to insecure deserialization of the OCSP response cache","description":"### Issue\nSnowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. The OCSP response cache uses pickle as the serialization format, potentially leading to local privilege escalation.\n\nThis vulnerability affects versions 2.7.12 through 3.13.0. Snowflake fixed the issue in version 3.13.1.\n\n### Vulnerability Details\nThe OCSP response cache is saved locally on the machine running the Connector using the pickle serialization format. This can potentially lead to local privilege escalation if an attacker has write access to the OCSP response cache file.\n\n### Solution\nSnowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.\n\n### Additional Information\nIf you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our [Vulnerability Disclosure Policy](https://hackerone.com/snowflake?type=team).","references":[{"url":"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-m4f6-vcj4-w5mx"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2025-24794"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/commit/3769b43822357c3874c40f5e74068458c2dc79af"},{"url":"https://github.com/advisories/GHSA-m4f6-vcj4-w5mx"}],"identifiers":[{"type":"GHSA","value":"GHSA-m4f6-vcj4-w5mx"},{"type":"CVE","value":"CVE-2025-24794"}],"cvss":{"score":6.7,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"},"cwes":{"nodes":[{"cweId":"CWE-502","name":"Deserialization of Untrusted Data","description":"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid."}]}}}},{"id":"RVA_kwDON1juqc8AAAABWdOADg","number":3,"createdAt":"2025-02-06T21:25:41Z","state":"OPEN","vulnerableManifestPath":"requirements.txt","vulnerableRequirements":"= 3.13.0","securityVulnerability":{"package":{"name":"snowflake-connector-python"},"advisory":{"severity":"HIGH","summary":"snowflake-connector-python vulnerable to SQL Injection in write_pandas","description":"### Issue\nSnowflake discovered and remediated a vulnerability in the Snowflake Connector for Python. A function from the snowflake.connector.pandas_tools module is vulnerable to SQL injection.\n\nThis vulnerability affects versions 2.2.5 through 3.13.0. Snowflake fixed the issue in version 3.13.1.\n\n### Vulnerability Details\nA function from the snowflake.connector.pandas_tools module is not sanitizing all of its arguments, and queries using them are not parametrized. An attacker controlling these arguments could achieve SQL injection by passing crafted input. Any SQL executed that way by an attacker would still run in the context of the current session.\n\n### Solution\nSnowflake released version 3.13.1 of the Snowflake Connector for Python, which fixes this issue. We recommend users upgrade to version 3.13.1.\n\n### Additional Information\nIf you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our [Vulnerability Disclosure Policy](https://hackerone.com/snowflake?type=team).","references":[{"url":"https://github.com/snowflakedb/snowflake-connector-python/security/advisories/GHSA-2vpq-fh52-j3wv"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/releases/tag/v3.13.1"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2025-24793"},{"url":"https://github.com/snowflakedb/snowflake-connector-python/commit/f3f9b666518d29c31a49384bbaa9a65889e72056"},{"url":"https://github.com/advisories/GHSA-2vpq-fh52-j3wv"}],"identifiers":[{"type":"GHSA","value":"GHSA-2vpq-fh52-j3wv"},{"type":"CVE","value":"CVE-2025-24793"}],"cvss":{"score":7.0,"vectorString":"CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H"},"cwes":{"nodes":[{"cweId":"CWE-89","name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","description":"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."}]}}}},{"id":"RVA_kwDON1juqc8AAAABWdOADw","number":4,"createdAt":"2025-02-06T21:25:42Z","state":"OPEN","vulnerableManifestPath":"requirements.txt","vulnerableRequirements":"= 11.1.0","securityVulnerability":{"package":{"name":"mitmproxy"},"advisory":{"severity":"HIGH","summary":"Mitmweb API Authentication Bypass Using Proxy Server","description":"### Impact\nIn mitmweb 11.1.0 and below, a malicious client can use mitmweb's proxy server (bound to `*:8080` by default) to access mitmweb's internal API (bound to `127.0.0.1:8081` by default). In other words, while the client cannot access the API directly (good), they can access the API through the proxy (bad). An attacker may be able to escalate this [SSRF](https://en.wikipedia.org/wiki/Server-side_request_forgery)-style access to remote code execution.\n\nThe mitmproxy and mitmdump tools are unaffected. Only mitmweb is affected. The `block_global` option, which is enabled by default, blocks connections originating from publicly-routable IP addresses in the proxy. The attacker needs to be in the same local network.\n\n### Patches\n\nThe vulnerability has been fixed in mitmproxy 11.1.2 and above.\n\n### Acknowledgements\n\nWe thank Stefan Gr√∂nke (@gronke) for reporting this vulnerability as part of a security audit by [Radically Open Security](https://www.radicallyopensecurity.com/). This audit was supported by the [NGI0 Entrust fund](https://nlnet.nl/entrust/) established by [NLnet](https://nlnet.nl/).\n\n### Timeline\n\n- **2025-01-14**: Received initial report. \n- **2025-01-14**: Verified report and confirmed receipt.\n- **2025-01-19**: Shared patch with researcher.\n- **2025-02-04**: Received final confirmation that patch is working.\n- **2025-02-05**: Published patched release and advisory.","references":[{"url":"https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-wg33-5h85-7q5p"},{"url":"https://github.com/mitmproxy/mitmproxy/commit/fa89055e196d953f11fd241e36ee37858993486a"},{"url":"https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2025-23217"},{"url":"https://en.wikipedia.org/wiki/Server-side_request_forgery"},{"url":"https://github.com/mitmproxy/mitmproxy/blob/main/CHANGELOG.md#06-february-2025-mitmproxy-1112"},{"url":"https://github.com/advisories/GHSA-wg33-5h85-7q5p"}],"identifiers":[{"type":"GHSA","value":"GHSA-wg33-5h85-7q5p"},{"type":"CVE","value":"CVE-2025-23217"}],"cvss":{"score":0.0,"vectorString":null},"cwes":{"nodes":[{"cweId":"CWE-288","name":"Authentication Bypass Using an Alternate Path or Channel","description":"A product requires authentication, but the product has an alternate path or channel that does not require authentication."},{"cweId":"CWE-441","name":"Unintended Proxy or Intermediary ('Confused Deputy')","description":"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor."}]}}}}]}}}}