name: Retrieve GHAS Alerts

on:
  workflow_dispatch:
  push:

#permissions: write-all  

jobs:
  get_alerts:
    name: Get Alerts from APIs
    runs-on: ubuntu-latest
    steps:

    - name: Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
    
    - name: Get Dependabot alerts using GitHub CLI      
      run: |
        gh api /repos/${{ github.repository }}/dependabot/alerts > dependabot-alerts.json
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

    - name: Upload Dependabot alerts as an artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: dependabot-alerts
        path: dependabot-alerts.json


    - name: Get CodeQL alerts using GitHub CLI
      run: |
        gh api /repos/${{ github.repository }}/code-scanning/alerts
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

    - name: Get Secret Scanning alerts using GitHub CLI
      run: |
        gh api /repos/${{ github.repository }}/secret-scanning/alerts
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}


    - name: Get Security alerts using GraphQL API
      run: |
        query='
          query ($name: String!, $owner: String!) {  
            repository(owner: $owner, name: $name) {
              nameWithOwner
              url
              vulnerabilityAlerts(first: 20) {
                nodes {
                  id
                  number
                  createdAt
                  state
                  vulnerableManifestPath
                  vulnerableRequirements        
                  securityVulnerability {
                    package {
                      name
                    }
                    advisory {
                      severity
                      summary
                      description
                      references {
                        url
                      }
                      identifiers {
                        type
                        value
                      }
                      cvss {
                        score     
                        vectorString        
                      }
                      cwes(first: 5) {              
                        nodes {
                          cweId
                          name
                          description
                        }
                      }
                    }
                  }        
                }
              }
              nameWithOwner
              url
            }
          }

          {
            "name": "ghas-alerts-from-api",
            "owner": "${{ github.repository_owner }}"
          }'
        gh api graphql -F query="${query}"
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}